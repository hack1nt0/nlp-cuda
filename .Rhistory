library(gbm)
install.packages('gbm')
library(gbm)
??gbm
library(tree)
install.packages('tree')
library(tree)
??tree
library(ISLR)
attach(Carseats)
high
High = ifelse(Sales <= 8, "NO", "YES")
Carseats = data.frame(Carseats, High)
tree.carseats = tree(High ~ . - Sales, Carseats)
summary(tree.carseats)
plot(tree.carseats)
?text
text(tree.carseats, pretty = 0)
text(tree.carseats, pretty = 1)
text(tree.carseats, pretty = 10)
text(tree.carseats, pretty = 0)
text(tree.carseats)
plot(tree.carseats)
text(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty = 0)
prune.misclass
tree.carseats
print(tree.carseats)
str(tree.carseats)
summary(tree.carseats)
library("partykit")
install.packages("partykit")
library(partykit)
??partyki
install.packages('caret')
library(caret)
??caret
sp_o <- partysplit(1L, index = 1:3)
sp_h <- partysplit(3L, breaks = 75)
sp_w <- partysplit(4L, index = 1:2)
data("WeatherPlay", package = "partykit")
pn <- partynode(1L, split = sp_o, kids = list(
partynode(2L, split = sp_h, kids = list(
partynode(3L, info = "yes"),
partynode(4L, info = "no"))),
partynode(5L, info = "yes"),
partynode(6L, split = sp_w, kids = list(
partynode(7L, info = "yes"),
partynode(8L, info = "no")))))
pn
py <- party(pn, WeatherPlay)
py
print(py)
plot(py)
letters
LETTERS
ls()
plot(as.partynode(tree.carseats))
plot(as.party(tree.carseats))
library(rpart)
??rpart
ls <- data.frame(y = gl(3, 50, labels = c("A", "B", "C")), x1 = rnorm(150) + rep(c(1, 0,
+ 50)), x2 = runif(150))
ls
c(1, 0, 50)
rep(c(1, 0, 50))
1:10 + c(1, 0, 50)
(1:10) + c(1, 0, 50)
(1:15) + c(1, 0, 50)
library(party)
library(partykit)
ctree(y ~ x1 + x2, ls)
ct
ct = ctree(y ~ x1 + x2, ls)
ct
plot(ct)
rpart(y ~ x1 + x2, ls)
rp = rpart(y ~ x1 + x2, ls)
rp
summary(rp)
plot(rp)
str(rp)
plot.party(rp)
plot.party(as.party(rp))
as.party.XMLNode
princomp
princomp.default
methods(princomp)
USArrests
row.names(USArrests)
names(USArrests)
mean(USArrests)
apply(USArrests, 2, var)
apply(USArrests, 2, mean)
apply(USArrests, 2, sd)
pr.out = prcomp(USArrests, scale. = T)
names(pr.cout)
names(pr.out)
pr.out$center
pr.out$scale
pr.out$rotation
pr.out$x
summary(pr.out$x)
apply(pr.out, 1, mean)
apply(pr.out$x, 1, mean)
apply(pr.out$x, 2, mean)
apply(pr.out$x, 2, var)
biplot
methods(biplot)
?biplot
biplot(pr.out)
biplot(pr.out, scale = 0)
getwd()
ls()
library(Matrix)
rsparsematrix(symmetric = T)
rsparsematrix(10, symmetric = T)
rsparsematrix(10, 10, 10, symmetric = T)
rsparsematrix(10, 10, 0.3, symmetric = T)
library(irlba)
??irlba
?prcomp
?prcomp_irlba
?prcomp
?scale
set.seed(1)
x <- matrix(rnorm(200), nrow=20)
p1 <- prcomp_irlba(x, n=3)
summary(p1)
p2 = prcomp(x)
summary(p2)
p1 = prcomp_irlba(USArrests, n = 3)
summary(p1)
p2 = prcomp(USArrests)
summary(p2)
p1 = prcomp_irlba(USArrests, n = 3, center = T, scale. = T)
summary(p1)
p2 = prcomp(USArrests, center = T, scale. = T)
summary(p2)
p1 = prcomp_irlba(USArrests, n = 3, center = colMeans(USArrests))
summary(p1)
p1 = prcomp_irlba(USArrests, n = 3, center = colMeans(USArrests), scale. = T)
summary(p1)
p1 = prcomp_irlba(USArrests, n = 3)
summary(p1)
p1 = prcomp_irlba(USArrests, n = 3, scale. = apply(USArrests, 2, ))
prcomp_irlba
sm
sm = rsparsematrix(10, 10, 0.3)
sm
is.matrix(sm)
class(sm)
irlba
svd
irlba(USArrests, 3, center = T)
irlba(USArrests, 3, center = colMeans(USArrests))
irlba(USArrests, 3, center = F)
irlba(USArrests, 3, center = T, scale = T)
prcomp(USArrests, center = T, scale. = T)
prcomp
ir.out = irlba(USArrests, center = T)
ir.out
ir.out = irlba(USArrests, 3, center = T)
ir.out
ir.scores = ir.out$u %*% diag(ir.out$d)
ir.scores
pr.out = prcomp(USArrests, 3, center = T)
pr.scores = pr.out$x
pr.scores
ir.scores - pr.scores
class(pr.scores)
ir.scores - pr.scores[,1:3]
max(ir.scores - pr.scores[,1:3])
min(ir.scores - pr.scores[,1:3])
range(ir.scores - pr.scores[,1:3])
summary(ir.scores - pr.scores[,1:3])
.Machine$double.eps
pr.out$sdev
ir.out$d
ir.out$d ^ 2 / 50
ir.out$d ^ 2
sqrt(ir.out$d ^ 2 / (50 - 1))
ir.out = irlba(USArrests, 3, center = T, scale = T)
pr.out = prcomp(USArrests, 3, center = T, scale = T)
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.scores = pr.out$x
range(ir.scores - pr.scores[,1:3])
pr.out = prcomp(USArrests, 3, center = T, scale. = T)
pr.scores = pr.out$x
ir.out = irlba(USArrests, 3, center = T, scale. = T)
ir.scores = ir.out$u %*% diag(ir.out$d)
range(ir.scores - pr.scores[,1:3])
pr.out = prcomp(USArrests, 3, center = T)
pr.scores = pr.out$x
ir.out = irlba(USArrests, 3, center = T, scale. = T)
ir.scores = ir.out$u %*% diag(ir.out$d)
range(ir.scores - pr.scores[,1:3])
ir.out1 = irlba(USArrests, 3, center = T)
ir.out2 = irlba(USArrests, 3, center = T, scale. = T)
ir.out1 == ir.out2
all.equal(ir.out1, ir.out2)
ir.out1
ir.out2
?irlba
sm
sm ^ 2
colSums(sm ^ 2)
sm2 = rsparsematrix(50000, 100000, 0.0003)
colSums(sm2 ^ 2)
sm2
plot.default
biplot
methods(biplot)
ir.out2 = irlba(USArrests, 3, center = colMeans(USArrests), scale = sqrt(colSums(USArrests ^ 2)))
all.equal(ir.out2, ir.out1)
ir.scores = ir.out2$u %*% diag(ir.out2$d)
range(ir.scores - pr.scores[,1:3])
ir.scores = ir.out$u %*% diag(ir.out$d)
{
library(Matrix)
library(irlba)
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x), scale = sqrt(colSums(x ^ 2) / nrow(x)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
all.equal(ir.scores, pr.scores[,1:n])
range(ir.scores - pr.scores[,1:n])
}
{
library(Matrix)
library(irlba)
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x), scale = sqrt(colSums(x ^ 2) / nrow(x)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
all.equal(ir.scores, pr.scores[,1:n])
# range(ir.scores - pr.scores[,1:n])
}
{
library(Matrix)
library(irlba)
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = sqrt(colSums(x ^ 2) / (nrow(x) - 1)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
all.equal(ir.scores, pr.scores[,1:n])
# range(ir.scores - pr.scores[,1:n])
}
{
library(Matrix)
library(irlba)
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = sqrt(colSums(x ^ 2) / (nrow(x) - 1)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
# all.equal(ir.scores, pr.scores[,1:n])
range(ir.scores - pr.scores[,1:n])
}
{
library(Matrix)
library(irlba)
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = sqrt(colSums(x ^ 2) / (nrow(x) - 1)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
# all.equal(ir.scores, pr.scores[,1:n])
range(ir.scores - pr.scores[,1:n])
}
?scale
methods(apply)
apply
colMeans
showMethods(colMeans)
apply(sm, 2, crossprod)
sm
nm1 = apply(sm2, 2, crossprod)
sd
?sd
class(sm)
sm
colSums(sm)
colMeans(sm)
colSums
(1:10) * (1:10)
{
library(Matrix)
library(irlba)
colVar.dgCMatrix <- function(x) {
Mean = colMeans(x)
(colSums(x ^ 2) - 2 * Mean * colSums(x) + Mean * Mean * nrow(x)) / (nrow(x) - 1)
}
colSd.dgCMatrix <- function(x) {
sqrt(colVar.dgCMatrix(x))
}
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = sqrt(colSums(x ^ 2) / (nrow(x) - 1)))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
# all.equal(ir.scores, pr.scores[,1:n])
range(ir.scores - pr.scores[,1:n])
}
colVar.dgCMatrix(sm)
var(sm)
var(as.matrix(sm))
apply(as.matrix(sm), 2, var)
colVar.dgCMatrix(sm)
sm2.var = colVar.dgCMatrix(sm2)
dim(sm2.var)
sm2
sm2.var
{
library(Matrix)
library(irlba)
colVar.dgCMatrix <- function(x) {
Mean = colMeans(x)
(colSums(x ^ 2) - 2 * Mean * colSums(x) + Mean * Mean * nrow(x)) / (nrow(x) - 1)
}
colSd.dgCMatrix <- function(x) {
sqrt(colVar.dgCMatrix(x))
}
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = colSd.dgCMatrix(x))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
# all.equal(ir.scores, pr.scores[,1:n])
range(ir.scores - pr.scores[,1:n])
}
all.equal(ir.scores, pr.scores[,1:n])
{
library(Matrix)
library(irlba)
colVar.dgCMatrix <- function(x) {
Mean = colMeans(x)
(colSums(x ^ 2) - 2 * Mean * colSums(x) + Mean * Mean * nrow(x)) / (nrow(x) - 1)
}
colSd.dgCMatrix <- function(x) {
sqrt(colVar.dgCMatrix(x))
}
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = colSd.dgCMatrix(x))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
all.equal(ir.scores, pr.scores[,1:n])
# range(ir.scores - pr.scores[,1:n])
}
ir.scores
pr.scores[,1:n]
all.equal(ir.scores, pr.scores[,1:n])
all.equal(abs(ir.scores), abs(pr.scores[,1:n]))
# range(ir.scores - pr.scores[,1:n])
}
range(abs(ir.scores) - abs(pr.scores[,1:n]))
Na
NA
NA ^ 2
colMeans(matrix(1:10, 2))
colMeans(matrix(c(1, NA, 4), 1))
summary
var
plot
sum
sd
biplot
mean
{
library(Matrix)
library(irlba)
colVar <- function(x, ...) UseMethod("colVar", x)
colVar.dgCMatrix <- function(x, ...) {
Mean = colMeans(x, ...)
(colSums(x ^ 2, ...) - 2 * Mean * colSums(x, ...) + Mean * Mean * nrow(x)) / (nrow(x) - 1)
}
colSd <- function(x, ...) UseMethod("colSd", x)
colSd.dgCMatrix <- function(x, ...) {
sqrt(colVar.dgCMatrix(x, ...))
}
x = rsparsematrix(10, 10, 0.3)
n = 3
ir.out = irlba(x, n, center = colMeans(x),
scale = colSd.dgCMatrix(x))
ir.scores = ir.out$u %*% diag(ir.out$d)
pr.out = prcomp(x, n, center = T, scale. = T)
pr.scores = pr.out$x
all.equal(ir.scores, pr.scores[,1:n])
# range(ir.scores - pr.scores[,1:n])
}
sm2.var = colVar(sm2)
sm2.var
sm2.sd = colSd(sm2)
prcomp_irlba
prcomp_irlba(sm2, 3)
prcomp(as.matrix(sm))
names(prcomp(as.matrix(sm)))
str(prcomp(as.matrix(sm)))
str(prcomp(as.matrix(sm), scale. = T))
ir.out$d
ir.out$d ^ 2
biplot.dtm(x, method = c("PCA", "TSNE"), ...) {
switch(match.arg(method),
PCA = {
Mean = colMeans(x)
Scale = colSd(x)
ir.out = irlba(x, n, center = Mean,
scale = Scale)
prcomp.out = structure(list(sdev = sqrt(ir.out$d ^ 2 / (nrow(x) - 1L)),
rotation = ir.out$v,
center = Mean,
scale = Scale,
x = ir.out$u %*% diag(ir.out$d)
), class = "prcomp")
biplot(prcomp.out, scale = 0)
},
TSNE = {
stop("NOT YET")
}
)
}
biplot.dtm(x, method = c("PCA", "TSNE"), ...) {
switch(match.arg(method),
PCA = {
Mean = colMeans(x)
Scale = colSd(x)
ir.out = irlba(x, n, center = Mean,
scale = Scale)
prcomp.out = structure(list(sdev = sqrt(ir.out$d ^ 2 / (nrow(x) - 1L)),
rotation = ir.out$v,
center = Mean,
scale = Scale,
x = ir.out$u %*% diag(ir.out$d)
), class = "prcomp")
biplot(prcomp.out, scale = 0)
},
TSNE = {
stop("NOT YET")
})
}
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
sm
biplot.dtm(sm)
biplot
?biplot
ls()
library(corn)
wll = tk(spam.sms$body)
dtm2 = dtm(wll)
save.image()
ls()
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
pca.dtm2 = prcomp(dtm2)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
biplot(pca.dtm2)
plot(pca.dtm2$x)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
pca.dtm2 = prcomp(dtm2)
class(pca.dtm2)
biplot(pca.dtm2)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
biplot(pca.dtm2)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
biplot(pca.dtm2)
pca.dtm2 = prcomp(dtm2, 10L)
plot(pca.dtm2$x)
biplot(pca.dtm2)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
pca.dtm2 = prcomp(dtm2, 10L)
biplot(pca.dtm2)
ggbiplot
?ggbiplot
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
biplot(pca.dtm2, var.axes = F)
source('~/nlp-cuda/src/R/R-package/R/dtm.R')
install.packages('bhtsne')
profvis::profvis({timesTwo(42)})
library(tsne)
if(!require(devtools)) install.packages("devtools") # If not already installed
devtools::install_github("jkrijthe/Rtsne")
install.packages("Rtsne")
library(Rtsne)
Rtsne
methods(Rtsne)
Rtsne.data.frame
??Rtsne
library(Rtsne) # Load package
iris_unique <- unique(iris) # Remove duplicates
set.seed(42) # Sets seed for reproducibility
tsne_out <- Rtsne(as.matrix(iris_unique[,1:4])) # Run TSNE
plot(tsne_out$Y,col=iris_unique$Species) # Plot the result
tsne_out
View(wll)
